buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.1.1'
    }

    gradle.projectsEvaluated {
        preBuild.dependsOn(addTest)
    }

}
apply plugin: 'com.android.application'

repositories {
    jcenter()
    maven { url 'https://github.com/kshoji/javax.sound.midi-for-Android/raw/master/javax.sound.midi/repository' }
    maven { url 'https://github.com/kshoji/USB-MIDI-Driver/raw/master/MIDIDriver/snapshots' }
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        applicationId "com.arnotjevleesch.arnotes"
        minSdkVersion 12
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
        //multiDexEnabled true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_6
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    //compile 'jp.kshoji:javax-sound-midi:0.0.1:@aar'
    compile 'jp.kshoji:midi-driver:0.1.1:@aar'
    androidTestCompile 'junit:junit:4.12'
    testCompile 'junit:junit:4.12'
}

task addTest {
    //Registers the test folder in the .iml file so Java tooling works.
    println 'addTest task'
    def src = ['src/test/java']
    def file = file("arnotes.iml") // Must match module file name

    try {
        def parsedXml = (new XmlParser()).parse(file)
        def node = parsedXml.component[1].content[0]
        src.each {
            def path = 'file://$MODULE_DIR$/' + "${it}"
            def set = node.find { it.@url == path }
            if (set == null) {
                new Node(node, 'sourceFolder',
                        ['url': 'file://$MODULE_DIR$/' + "${it}", 'isTestSource': "true"])
                def writer = new StringWriter()
                new XmlNodePrinter(new PrintWriter(writer)).print(parsedXml)
                file.text = writer.toString()
            }
        }
    } catch (FileNotFoundException e) {
        println 'iml not found'
    }

}